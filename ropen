#!/bin/bash

if (( $# < 1 )); then
	echo "usage: ${0##*/} <infile.ext>" >&2
	exit 1
fi

infile=$1

if [[ -f .ropen.lock ]]; then
	echo "Another ropen instance is initializing. Please wait until it is done."
	exit 1
fi

# prevent other instances of `ropen` from running until this instance
# finishes launching
touch .ropen.lock

# Expected behaviour:
# A temporary `.Rprofile` will be created with custom startup scripts.
# This temporary `.Rprofile` will be based on a `./.Rprofile` or
# `~/.Rprofile`, if any exists
# A backup of the original `./.Rprofile` (if any exists) will be created 
# as `.Rprofile.ropen`.
# As soon as R finish initialization, the temporary `.Rprofile` will be 
# deleted; further, if any backup `.Rprofile.ropen` exists, it will be 
# renamed as `.Rprofile`.

# setup and clean up
if [[ -f .Rprofile ]]; then
	# backup initialization script in current directroy
	cp .Rprofile .Rprofile.ropen
else
	# use initialization script at $HOME, if available
	if [[ -f ~/.Rprofile ]]; then
		cp ~/.Rprofile .Rprofile
	fi
fi

# NB  Multiple instances may modify .Rprofile, problems may occur if they
#     are modifying .Rprofile simultaneously.
#     Once R is initilized, any temporary .Rprofile is obsolete.

# use available initialization script as starting point
# add startup code
cat >> .Rprofile << EOF
status <- file.remove(".Rprofile");
if (file.exists(".Rprofile.ropen")) {
	status <- file.rename(".Rprofile.ropen", ".Rprofile");
}
status <- file.remove(".ropen.lock");

library(io, quiet=TRUE);
x <- qread("$infile");
message("variable: x");
message("class: ", class(x));
message("dimensions: ", paste(dim(x), collapse=", "));
message("head: ");
print(x[1:6, ]);
EOF

R --interactive --quiet
